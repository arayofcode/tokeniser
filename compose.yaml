name: tokeniser
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    depends_on:
      db:
        condition: service_healthy
        restart: true
      flyway:
        condition: service_completed_successfully
    ports:
      - "127.0.0.1:${APP_PORT}:${APP_PORT}"
    environment:
      - PASSPHRASE
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_DB
      - APP_PORT
    networks:
      - backend-network
      - vault-network

  db:
    image: postgres:16.2-alpine3.19
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vault-network
      - operations-management
    expose:
      - 5432

  flyway:
    image: flyway/flyway:10.10
    volumes:
      - ./migrations/migration:/migrations
    depends_on:
      - db
    environment:
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      FLYWAY_POSTGRESQL_TRANSACTIONAL_LOCK: false
      FLYWAY_DRIVER: org.postgresql.Driver
      FLYWAY_LOCATIONS: filesystem:/migrations
    networks:
      - operations-management
    command: migrate

volumes:
  pgdata:

networks:
  vault-network:
    internal: true
  backend-network:
  operations-management: # To separate operational traffic from external traffic
    internal: true